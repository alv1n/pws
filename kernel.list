
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea00016e 	b	85c0 <main>

Disassembly of section .text:

00008004 <MailboxWrite>:
    8004:	e310000f 	tst	r0, #15
    8008:	11a0f00e 	movne	pc, lr
    800c:	e351000f 	cmp	r1, #15
    8010:	81a0f00e 	movhi	pc, lr
    8014:	e59f2044 	ldr	r2, [pc, #68]	; 8060 <rightmail$+0x24>

00008018 <wait1$>:
    8018:	e5923018 	ldr	r3, [r2, #24]
    801c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    8020:	1afffffc 	bne	8018 <wait1$>
    8024:	e0800001 	add	r0, r0, r1
    8028:	e5820020 	str	r0, [r2, #32]
    802c:	e1a0f00e 	mov	pc, lr

00008030 <MailboxRead>:
    8030:	e350000f 	cmp	r0, #15
    8034:	81a0f00e 	movhi	pc, lr
    8038:	e59f1020 	ldr	r1, [pc, #32]	; 8060 <rightmail$+0x24>

0000803c <rightmail$>:
    803c:	e5912018 	ldr	r2, [r1, #24]
    8040:	e3120101 	tst	r2, #1073741824	; 0x40000000
    8044:	1afffffc 	bne	803c <rightmail$>
    8048:	e5912000 	ldr	r2, [r1]
    804c:	e202300f 	and	r3, r2, #15
    8050:	e1330000 	teq	r3, r0
    8054:	1afffff8 	bne	803c <rightmail$>
    8058:	e3c2000f 	bic	r0, r2, #15
    805c:	e1a0f00e 	mov	pc, lr
    8060:	2000b880 	.word	0x2000b880

00008064 <InitialiseFrameBuffer>:
    8064:	e3500a01 	cmp	r0, #4096	; 0x1000
    8068:	93510a01 	cmpls	r1, #4096	; 0x1000
    806c:	93520020 	cmpls	r2, #32
    8070:	83a00000 	movhi	r0, #0
    8074:	81a0f00e 	movhi	pc, lr
    8078:	e92d4010 	push	{r4, lr}
    807c:	e59f403c 	ldr	r4, [pc, #60]	; 80c0 <InitialiseFrameBuffer+0x5c>
    8080:	e5840000 	str	r0, [r4]
    8084:	e5841004 	str	r1, [r4, #4]
    8088:	e5840008 	str	r0, [r4, #8]
    808c:	e584100c 	str	r1, [r4, #12]
    8090:	e5842014 	str	r2, [r4, #20]
    8094:	e1a00004 	mov	r0, r4
    8098:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
    809c:	e3a01001 	mov	r1, #1
    80a0:	ebffffd7 	bl	8004 <MailboxWrite>
    80a4:	e3a00001 	mov	r0, #1
    80a8:	ebffffe0 	bl	8030 <MailboxRead>
    80ac:	e3300000 	teq	r0, #0
    80b0:	13a00000 	movne	r0, #0
    80b4:	18bd8010 	popne	{r4, pc}
    80b8:	e1a00004 	mov	r0, r4
    80bc:	e8bd8010 	pop	{r4, pc}
    80c0:	000086f0 	.word	0x000086f0

000080c4 <DrawStringz>:
    80c4:	e92d4070 	push	{r4, r5, r6, lr}
    80c8:	e1a04000 	mov	r4, r0
    80cc:	e1a05001 	mov	r5, r1
    80d0:	e1a06002 	mov	r6, r2
    80d4:	eb000005 	bl	80f0 <CharCount>
    80d8:	e1a01000 	mov	r1, r0
    80dc:	e1a00004 	mov	r0, r4
    80e0:	e1a02005 	mov	r2, r5
    80e4:	e1a03006 	mov	r3, r6
    80e8:	eb0000ec 	bl	84a0 <DrawString>
    80ec:	e8bd8070 	pop	{r4, r5, r6, pc}

000080f0 <CharCount>:
    80f0:	e1a01000 	mov	r1, r0
    80f4:	e3a00000 	mov	r0, #0

000080f8 <CharCountLoop$>:
    80f8:	e7d12000 	ldrb	r2, [r1, r0]
    80fc:	e3520000 	cmp	r2, #0
    8100:	01a0f00e 	moveq	pc, lr
    8104:	e2800001 	add	r0, r0, #1
    8108:	eafffffa 	b	80f8 <CharCountLoop$>

0000810c <SignedString>:
    810c:	e92d4010 	push	{r4, lr}
    8110:	e3520000 	cmp	r2, #0
    8114:	d3e00001 	mvnle	r0, #1
    8118:	d8bd9ff0 	pople	{r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    811c:	e3a04000 	mov	r4, #0
    8120:	e3500000 	cmp	r0, #0
    8124:	aa000005 	bge	8140 <ContinueSignedString$>
    8128:	e3a0302d 	mov	r3, #45	; 0x2d
    812c:	e3310000 	teq	r1, #0
    8130:	15c13000 	strbne	r3, [r1]
    8134:	e2811001 	add	r1, r1, #1
    8138:	e2600000 	rsb	r0, r0, #0
    813c:	e2844001 	add	r4, r4, #1

00008140 <ContinueSignedString$>:
    8140:	eb000001 	bl	814c <UnsignedString>
    8144:	e0800004 	add	r0, r0, r4
    8148:	d8bd8010 	pople	{r4, pc}

0000814c <UnsignedString>:
    814c:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8150:	e1a04000 	mov	r4, r0
    8154:	e1a05001 	mov	r5, r1
    8158:	e1a06002 	mov	r6, r2
    815c:	e3a07000 	mov	r7, #0

00008160 <ConversionLoop$>:
    8160:	e1a01006 	mov	r1, r6
    8164:	eb000138 	bl	864c <DivideU32>
    8168:	e351000a 	cmp	r1, #10
    816c:	32811030 	addcc	r1, r1, #48	; 0x30
    8170:	22811057 	addcs	r1, r1, #87	; 0x57
    8174:	e3350000 	teq	r5, #0
    8178:	17c51007 	strbne	r1, [r5, r7]
    817c:	e2877001 	add	r7, r7, #1
    8180:	e3500000 	cmp	r0, #0
    8184:	8afffff5 	bhi	8160 <ConversionLoop$>
    8188:	e3350000 	teq	r5, #0
    818c:	11a00005 	movne	r0, r5
    8190:	11a01007 	movne	r1, r7
    8194:	1b000001 	blne	81a0 <ReverseString>
    8198:	e1a00007 	mov	r0, r7
    819c:	e8bd9ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000081a0 <ReverseString>:
    81a0:	e0801001 	add	r1, r0, r1
    81a4:	e2411001 	sub	r1, r1, #1

000081a8 <ReversionLoop$>:
    81a8:	e1510000 	cmp	r1, r0
    81ac:	91a0f00e 	movls	pc, lr
    81b0:	e5d02000 	ldrb	r2, [r0]
    81b4:	e5d13000 	ldrb	r3, [r1]
    81b8:	e5c03000 	strb	r3, [r0]
    81bc:	e5c12000 	strb	r2, [r1]
    81c0:	e2800001 	add	r0, r0, #1
    81c4:	e2411001 	sub	r1, r1, #1
    81c8:	eafffff6 	b	81a8 <ReversionLoop$>

000081cc <FormatString>:
    81cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    81d0:	e1a04000 	mov	r4, r0
    81d4:	e1a05001 	mov	r5, r1
    81d8:	e1a06002 	mov	r6, r2
    81dc:	e1a07003 	mov	r7, r3
    81e0:	e28d801c 	add	r8, sp, #28
    81e4:	e3a09000 	mov	r9, #0

000081e8 <formatLoop$>:
    81e8:	e2555001 	subs	r5, r5, #1
    81ec:	b1a00009 	movlt	r0, r9
    81f0:	b8bd83f0 	poplt	{r4, r5, r6, r7, r8, r9, pc}
    81f4:	e5d40000 	ldrb	r0, [r4]
    81f8:	e2844001 	add	r4, r4, #1
    81fc:	e3300025 	teq	r0, #37	; 0x25
    8200:	0a000004 	beq	8218 <formatArg$>

00008204 <formatChar$>:
    8204:	e3360000 	teq	r6, #0
    8208:	15c60000 	strbne	r0, [r6]
    820c:	12866001 	addne	r6, r6, #1
    8210:	e2899001 	add	r9, r9, #1
    8214:	eafffff3 	b	81e8 <formatLoop$>

00008218 <formatArg$>:
    8218:	e2555001 	subs	r5, r5, #1
    821c:	b1a00009 	movlt	r0, r9
    8220:	b8bd83f0 	poplt	{r4, r5, r6, r7, r8, r9, pc}
    8224:	e5d40000 	ldrb	r0, [r4]
    8228:	e2844001 	add	r4, r4, #1
    822c:	e3300025 	teq	r0, #37	; 0x25
    8230:	0afffff3 	beq	8204 <formatChar$>
    8234:	e3300063 	teq	r0, #99	; 0x63
    8238:	01a00007 	moveq	r0, r7
    823c:	05987000 	ldreq	r7, [r8]
    8240:	02888004 	addeq	r8, r8, #4
    8244:	0affffee 	beq	8204 <formatChar$>
    8248:	e3300073 	teq	r0, #115	; 0x73
    824c:	0a000007 	beq	8270 <formatString$>
    8250:	e3300064 	teq	r0, #100	; 0x64
    8254:	0a000010 	beq	829c <formatSigned$>
    8258:	e3300075 	teq	r0, #117	; 0x75
    825c:	13300078 	teqne	r0, #120	; 0x78
    8260:	13300062 	teqne	r0, #98	; 0x62
    8264:	1330006f 	teqne	r0, #111	; 0x6f
    8268:	0a000015 	beq	82c4 <formatUnsigned$>
    826c:	eaffffdd 	b	81e8 <formatLoop$>

00008270 <formatString$>:
    8270:	e5d70000 	ldrb	r0, [r7]
    8274:	e3300000 	teq	r0, #0
    8278:	05987000 	ldreq	r7, [r8]
    827c:	02888004 	addeq	r8, r8, #4
    8280:	0affffd8 	beq	81e8 <formatLoop$>
    8284:	e2899001 	add	r9, r9, #1
    8288:	e3360000 	teq	r6, #0
    828c:	15c60000 	strbne	r0, [r6]
    8290:	12866001 	addne	r6, r6, #1
    8294:	e2877001 	add	r7, r7, #1
    8298:	eafffff4 	b	8270 <formatString$>

0000829c <formatSigned$>:
    829c:	e1a00007 	mov	r0, r7
    82a0:	e5987000 	ldr	r7, [r8]
    82a4:	e2888004 	add	r8, r8, #4
    82a8:	e1a01006 	mov	r1, r6
    82ac:	e3a0200a 	mov	r2, #10
    82b0:	ebffff95 	bl	810c <SignedString>
    82b4:	e3360000 	teq	r6, #0
    82b8:	10866000 	addne	r6, r6, r0
    82bc:	e0899000 	add	r9, r9, r0
    82c0:	eaffffc8 	b	81e8 <formatLoop$>

000082c4 <formatUnsigned$>:
    82c4:	e3300075 	teq	r0, #117	; 0x75
    82c8:	03a0200a 	moveq	r2, #10
    82cc:	e3300078 	teq	r0, #120	; 0x78
    82d0:	03a02010 	moveq	r2, #16
    82d4:	e3300062 	teq	r0, #98	; 0x62
    82d8:	03a02002 	moveq	r2, #2
    82dc:	e330006f 	teq	r0, #111	; 0x6f
    82e0:	03a02008 	moveq	r2, #8
    82e4:	e1a00007 	mov	r0, r7
    82e8:	e5987000 	ldr	r7, [r8]
    82ec:	e2888004 	add	r8, r8, #4
    82f0:	e1a01006 	mov	r1, r6
    82f4:	ebffff94 	bl	814c <UnsignedString>
    82f8:	e3360000 	teq	r6, #0
    82fc:	10866000 	addne	r6, r6, r0
    8300:	e0899000 	add	r9, r9, r0
    8304:	eaffffb7 	b	81e8 <formatLoop$>

00008308 <timerWait>:
    8308:	e1a03000 	mov	r3, r0
    830c:	e59f2014 	ldr	r2, [pc, #20]	; 8328 <timerWaitLoop$+0x10>
    8310:	e1c200d0 	ldrd	r0, [r2]
    8314:	e0833000 	add	r3, r3, r0

00008318 <timerWaitLoop$>:
    8318:	e1c200d0 	ldrd	r0, [r2]
    831c:	e1530000 	cmp	r3, r0
    8320:	8afffffc 	bhi	8318 <timerWaitLoop$>
    8324:	e1a0f00e 	mov	pc, lr
    8328:	20003004 	.word	0x20003004

0000832c <SetForeColour>:
    832c:	e3500801 	cmp	r0, #65536	; 0x10000
    8330:	21a0f00e 	movcs	pc, lr
    8334:	e59f11d4 	ldr	r1, [pc, #468]	; 8510 <stringLoopTab$+0x14>
    8338:	e1c100b0 	strh	r0, [r1]
    833c:	e1a0f00e 	mov	pc, lr

00008340 <SetGraphicsAddress>:
    8340:	e59f11cc 	ldr	r1, [pc, #460]	; 8514 <stringLoopTab$+0x18>
    8344:	e5810000 	str	r0, [r1]
    8348:	e1a0f00e 	mov	pc, lr

0000834c <DrawPixel>:
    834c:	e59f21c0 	ldr	r2, [pc, #448]	; 8514 <stringLoopTab$+0x18>
    8350:	e5922000 	ldr	r2, [r2]
    8354:	e5923004 	ldr	r3, [r2, #4]
    8358:	e1510003 	cmp	r1, r3
    835c:	21a0f00e 	movcs	pc, lr
    8360:	e5923000 	ldr	r3, [r2]
    8364:	e1500003 	cmp	r0, r3
    8368:	21a0f00e 	movcs	pc, lr
    836c:	e5922020 	ldr	r2, [r2, #32]
    8370:	e0200391 	mla	r0, r1, r3, r0
    8374:	e0822080 	add	r2, r2, r0, lsl #1
    8378:	e59f3190 	ldr	r3, [pc, #400]	; 8510 <stringLoopTab$+0x14>
    837c:	e1d330b0 	ldrh	r3, [r3]
    8380:	e1c230b0 	strh	r3, [r2]
    8384:	e1a0f00e 	mov	pc, lr

00008388 <DrawLine>:
    8388:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    838c:	e1a09000 	mov	r9, r0
    8390:	e1a0a002 	mov	sl, r2
    8394:	e1a0b001 	mov	fp, r1
    8398:	e1a0c003 	mov	ip, r3
    839c:	e159000a 	cmp	r9, sl
    83a0:	c049400a 	subgt	r4, r9, sl
    83a4:	c3e06000 	mvngt	r6, #0
    83a8:	d04a4009 	suble	r4, sl, r9
    83ac:	d3a06001 	movle	r6, #1
    83b0:	e15b000c 	cmp	fp, ip
    83b4:	c04c500b 	subgt	r5, ip, fp
    83b8:	c3e07000 	mvngt	r7, #0
    83bc:	d04b500c 	suble	r5, fp, ip
    83c0:	d3a07001 	movle	r7, #1
    83c4:	e0848005 	add	r8, r4, r5
    83c8:	e08aa006 	add	sl, sl, r6
    83cc:	e08cc007 	add	ip, ip, r7

000083d0 <pixelLoop$>:
    83d0:	e139000a 	teq	r9, sl
    83d4:	113b000c 	teqne	fp, ip
    83d8:	08bd9ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    83dc:	e1a00009 	mov	r0, r9
    83e0:	e1a0100b 	mov	r1, fp
    83e4:	ebffffd8 	bl	834c <DrawPixel>
    83e8:	e1550088 	cmp	r5, r8, lsl #1
    83ec:	d0888005 	addle	r8, r8, r5
    83f0:	d0899006 	addle	r9, r9, r6
    83f4:	e1540088 	cmp	r4, r8, lsl #1
    83f8:	a0888004 	addge	r8, r8, r4
    83fc:	a08bb007 	addge	fp, fp, r7
    8400:	eafffff2 	b	83d0 <pixelLoop$>

00008404 <DrawByte>:
    8404:	e20000ff 	and	r0, r0, #255	; 0xff
    8408:	e3510b01 	cmp	r1, #1024	; 0x400
    840c:	33520c03 	cmpcc	r2, #768	; 0x300
    8410:	21a0f00e 	movcs	pc, lr
    8414:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8418:	e1a04000 	mov	r4, r0
    841c:	e1a05001 	mov	r5, r1
    8420:	e1a06002 	mov	r6, r2
    8424:	e3a07000 	mov	r7, #0

00008428 <DrawByteLoop$>:
    8428:	e3140001 	tst	r4, #1
    842c:	10850007 	addne	r0, r5, r7
    8430:	11a01006 	movne	r1, r6
    8434:	1bffffc4 	blne	834c <DrawPixel>
    8438:	e1a040a4 	lsr	r4, r4, #1
    843c:	e2877001 	add	r7, r7, #1
    8440:	e3370008 	teq	r7, #8
    8444:	1afffff7 	bne	8428 <DrawByteLoop$>
    8448:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000844c <DrawCharacter>:
    844c:	e350007f 	cmp	r0, #127	; 0x7f
    8450:	81a0f00e 	movhi	pc, lr
    8454:	e3510b01 	cmp	r1, #1024	; 0x400
    8458:	33520c03 	cmpcc	r2, #768	; 0x300
    845c:	21a0f00e 	movcs	pc, lr
    8460:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8464:	e1a04001 	mov	r4, r1
    8468:	e1a05002 	mov	r5, r2
    846c:	e59f60a4 	ldr	r6, [pc, #164]	; 8518 <stringLoopTab$+0x1c>
    8470:	e0866200 	add	r6, r6, r0, lsl #4

00008474 <DrawCharacterLewp$>:
    8474:	e5d60000 	ldrb	r0, [r6]
    8478:	e1a01004 	mov	r1, r4
    847c:	e1a02005 	mov	r2, r5
    8480:	ebffffdf 	bl	8404 <DrawByte>
    8484:	e2855001 	add	r5, r5, #1
    8488:	e2866001 	add	r6, r6, #1
    848c:	e316000f 	tst	r6, #15
    8490:	1afffff7 	bne	8474 <DrawCharacterLewp$>
    8494:	e3a00008 	mov	r0, #8
    8498:	e3a01010 	mov	r1, #16
    849c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000084a0 <DrawString>:
    84a0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    84a4:	e1a04000 	mov	r4, r0
    84a8:	e1a07001 	mov	r7, r1
    84ac:	e1a05002 	mov	r5, r2
    84b0:	e1a06003 	mov	r6, r3
    84b4:	e1a08005 	mov	r8, r5

000084b8 <DrawStringLoop$>:
    84b8:	e2577001 	subs	r7, r7, #1
    84bc:	b8bd83f0 	poplt	{r4, r5, r6, r7, r8, r9, pc}
    84c0:	e5d49000 	ldrb	r9, [r4]
    84c4:	e1a00009 	mov	r0, r9
    84c8:	e1a01005 	mov	r1, r5
    84cc:	e1a02006 	mov	r2, r6
    84d0:	ebffffdd 	bl	844c <DrawCharacter>
    84d4:	e2844001 	add	r4, r4, #1
    84d8:	e339000a 	teq	r9, #10
    84dc:	00866001 	addeq	r6, r6, r1
    84e0:	01a05008 	moveq	r5, r8
    84e4:	0afffff3 	beq	84b8 <DrawStringLoop$>
    84e8:	e3390009 	teq	r9, #9
    84ec:	10855000 	addne	r5, r5, r0
    84f0:	1afffff0 	bne	84b8 <DrawStringLoop$>
    84f4:	e0800100 	add	r0, r0, r0, lsl #2
    84f8:	e1a01008 	mov	r1, r8

000084fc <stringLoopTab$>:
    84fc:	e0811000 	add	r1, r1, r0
    8500:	e1550001 	cmp	r5, r1
    8504:	aafffffc 	bge	84fc <stringLoopTab$>
    8508:	e1a05001 	mov	r5, r1
    850c:	eaffffe9 	b	84b8 <DrawStringLoop$>
    8510:	00008720 	.word	0x00008720
    8514:	00008724 	.word	0x00008724
    8518:	00008730 	.word	0x00008730

0000851c <SetGpioFunction>:
    851c:	e3500035 	cmp	r0, #53	; 0x35
    8520:	93510007 	cmpls	r1, #7
    8524:	81a0f00e 	movhi	pc, lr
    8528:	e1a02000 	mov	r2, r0
    852c:	e59f0088 	ldr	r0, [pc, #136]	; 85bc <SetGpio+0x50>

00008530 <functionLoop$>:
    8530:	e3520009 	cmp	r2, #9
    8534:	8242200a 	subhi	r2, r2, #10
    8538:	82800004 	addhi	r0, r0, #4
    853c:	8afffffb 	bhi	8530 <functionLoop$>
    8540:	e0822082 	add	r2, r2, r2, lsl #1
    8544:	e1a01211 	lsl	r1, r1, r2
    8548:	e3a03007 	mov	r3, #7
    854c:	e1a03213 	lsl	r3, r3, r2
    8550:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    8554:	e5904000 	ldr	r4, [r0]
    8558:	e1c44003 	bic	r4, r4, r3
    855c:	e1811004 	orr	r1, r1, r4
    8560:	e5801000 	str	r1, [r0]
    8564:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    8568:	e1a0f00e 	mov	pc, lr

0000856c <SetGpio>:
    856c:	e3500035 	cmp	r0, #53	; 0x35
    8570:	81a0f00e 	movhi	pc, lr
    8574:	e1a02000 	mov	r2, r0
    8578:	e59f003c 	ldr	r0, [pc, #60]	; 85bc <SetGpio+0x50>
    857c:	e1a032a2 	lsr	r3, r2, #5
    8580:	e1a03103 	lsl	r3, r3, #2
    8584:	e0800003 	add	r0, r0, r3
    8588:	e202201f 	and	r2, r2, #31
    858c:	e3a03001 	mov	r3, #1
    8590:	e1a03213 	lsl	r3, r3, r2
    8594:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    8598:	e3310000 	teq	r1, #0
    859c:	05904028 	ldreq	r4, [r0, #40]	; 0x28
    85a0:	1590401c 	ldrne	r4, [r0, #28]
    85a4:	e1833004 	orr	r3, r3, r4
    85a8:	e3310000 	teq	r1, #0
    85ac:	05803028 	streq	r3, [r0, #40]	; 0x28
    85b0:	1580301c 	strne	r3, [r0, #28]
    85b4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    85b8:	e1a0f00e 	mov	pc, lr
    85bc:	20200000 	.word	0x20200000

000085c0 <main>:
    85c0:	e3a0d902 	mov	sp, #32768	; 0x8000
    85c4:	e3a00b01 	mov	r0, #1024	; 0x400
    85c8:	e3a01c03 	mov	r1, #768	; 0x300
    85cc:	e3a02010 	mov	r2, #16
    85d0:	ebfffea3 	bl	8064 <InitialiseFrameBuffer>
    85d4:	e3300000 	teq	r0, #0
    85d8:	1a000006 	bne	85f8 <noError$>
    85dc:	e3a0002f 	mov	r0, #47	; 0x2f
    85e0:	e3a01001 	mov	r1, #1
    85e4:	ebffffcc 	bl	851c <SetGpioFunction>
    85e8:	e3a0002f 	mov	r0, #47	; 0x2f
    85ec:	e3a01000 	mov	r1, #0
    85f0:	ebffffdd 	bl	856c <SetGpio>

000085f4 <error$>:
    85f4:	eafffffe 	b	85f4 <error$>

000085f8 <noError$>:
    85f8:	ebffff50 	bl	8340 <SetGraphicsAddress>
    85fc:	e59f0028 	ldr	r0, [pc, #40]	; 862c <lewp$+0x4>
    8600:	ebfffeba 	bl	80f0 <CharCount>
    8604:	e1a01000 	mov	r1, r0
    8608:	e59f001c 	ldr	r0, [pc, #28]	; 862c <lewp$+0x4>
    860c:	e59f201c 	ldr	r2, [pc, #28]	; 8630 <lewp$+0x8>
    8610:	e3e0301f 	mvn	r3, #31
    8614:	ebfffeec 	bl	81cc <FormatString>
    8618:	e59f0010 	ldr	r0, [pc, #16]	; 8630 <lewp$+0x8>
    861c:	e3a01000 	mov	r1, #0
    8620:	e3a02000 	mov	r2, #0
    8624:	ebfffea6 	bl	80c4 <DrawStringz>

00008628 <lewp$>:
    8628:	eafffffe 	b	8628 <lewp$>
    862c:	00008f30 	.word	0x00008f30
    8630:	00008f69 	.word	0x00008f69

00008634 <Random>:
    8634:	e3a01cef 	mov	r1, #61184	; 0xef00
    8638:	e0010190 	mul	r1, r0, r1
    863c:	e0010190 	mul	r1, r0, r1
    8640:	e0811000 	add	r1, r1, r0
    8644:	e2810049 	add	r0, r1, #73	; 0x49
    8648:	e1a0f00e 	mov	pc, lr

0000864c <DivideU32>:
    864c:	e16f2f11 	clz	r2, r1
    8650:	e16f3f10 	clz	r3, r0
    8654:	e0522003 	subs	r2, r2, r3
    8658:	e1a03211 	lsl	r3, r1, r2
    865c:	e1a01000 	mov	r1, r0
    8660:	e3a00000 	mov	r0, #0
    8664:	ba000009 	blt	8690 <divideU32Return$>

00008668 <divideU32Loop$>:
    8668:	e1510003 	cmp	r1, r3
    866c:	ba000003 	blt	8680 <divideU32LoopContinue$>
    8670:	e2800001 	add	r0, r0, #1
    8674:	e0511003 	subs	r1, r1, r3
    8678:	01a00210 	lsleq	r0, r0, r2
    867c:	0a000003 	beq	8690 <divideU32Return$>

00008680 <divideU32LoopContinue$>:
    8680:	e2522001 	subs	r2, r2, #1
    8684:	a1a030a3 	lsrge	r3, r3, #1
    8688:	a1a00080 	lslge	r0, r0, #1
    868c:	aafffff5 	bge	8668 <divideU32Loop$>

00008690 <divideU32Return$>:
    8690:	e1a0f00e 	mov	pc, lr

00008694 <FindTag>:
    8694:	e2400001 	sub	r0, r0, #1
    8698:	e3500008 	cmp	r0, #8
    869c:	83a00000 	movhi	r0, #0
    86a0:	81a0f00e 	movhi	pc, lr
    86a4:	e59f1040 	ldr	r1, [pc, #64]	; 86ec <tagLoop$+0x28>

000086a8 <tagReturn$>:
    86a8:	e0812100 	add	r2, r1, r0, lsl #2
    86ac:	e5922000 	ldr	r2, [r2]
    86b0:	e3320000 	teq	r2, #0
    86b4:	11a00002 	movne	r0, r2
    86b8:	11a0f00e 	movne	pc, lr
    86bc:	e3a02c01 	mov	r2, #256	; 0x100
    86c0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

000086c4 <tagLoop$>:
    86c4:	e1d230b4 	ldrh	r3, [r2, #4]
    86c8:	e2533001 	subs	r3, r3, #1
    86cc:	b49d4004 	poplt	{r4}		; (ldrlt r4, [sp], #4)
    86d0:	bafffff4 	blt	86a8 <tagReturn$>
    86d4:	e0813103 	add	r3, r1, r3, lsl #2
    86d8:	e5934000 	ldr	r4, [r3]
    86dc:	e3340000 	teq	r4, #0
    86e0:	05832000 	streq	r2, [r3]
    86e4:	e5923000 	ldr	r3, [r2]
    86e8:	e0822103 	add	r2, r2, r3, lsl #2
    86ec:	00008f45 	.word	0x00008f45
